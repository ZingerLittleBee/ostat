/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum Advance {
  /** 1000 */
  Kilobase = 1000,
  /** 1024 */
  Binary = 1024,
}
export interface ConvertOption {
  advance: Advance
  precision: number
}
export interface ConvertResult {
  value: string
  unit: string
}
export interface CPULoad {
  user: number
  nice: number
  system: number
  interrupt: number
  idle: number
  iowait: number
}
export interface FileSystem {
  /** Used file nodes in filesystem */
  files: bigint
  /** Total file nodes in filesystem */
  filesTotal: bigint
  /** Free nodes available to non-superuser */
  filesAvail: bigint
  /** Free bytes in filesystem */
  free: bigint
  /** Free bytes available to non-superuser */
  avail: bigint
  /** Total bytes in filesystem */
  total: bigint
  /** Maximum filename length */
  nameMax: bigint
  fsType: string
  fsMountedFrom: string
  fsMountedOn: string
}
export const enum _AddrType {
  Ipv4 = 0,
  IPv6 = 1,
}
export interface NetworkAddrs {
  addr: string
  netmask: string
  addrType: _AddrType
}
export interface Network {
  name: string
  addrs: Array<NetworkAddrs>
}
export interface Memory {
  free: bigint
  total: bigint
  used: bigint
}
export interface LoadAverage {
  one: number
  five: number
  fifteen: number
}
export interface SocketStats {
  tcpSocketsInUse: bigint
  tcpSocketsOrphaned: bigint
  udpSocketsInUse: bigint
  tcp6SocketsInUse: bigint
  udp6SocketsInUse: bigint
}
export function format(source: bigint, option?: ConvertOption | undefined | null): ConvertResult
export class Stat {
  /** Create stat instance. */
  constructor()
  /** Get filesystem mount information. */
  mounts(): Array<FileSystem>
  /** Get a filesystem mount information for the filesystem at a given path. */
  mountAt(at: string): FileSystem
  /** Get network intefrace information. */
  networks(): Array<Network>
  /** Get memory information. */
  memory(): Memory
  /** Get swap memory information. */
  swap(): Memory
  /** Get load average. */
  loadAverage(): LoadAverage
  /** Get the system uptime. */
  uptime(): bigint
  /** Get the system boot time. */
  bootTime(): Date
  /** Get CPU load statistics, average over all CPUs (cores). */
  cpuLoadAggregate(): CPULoad
  /**
   * Get the current CPU temperature in degrees Celsius.
   * Depending on the platform, this might be core 0, package, etc.
   */
  cpuTemp(): number
  /** Get information about the number of sockets in use */
  socketStats(): SocketStats
}
